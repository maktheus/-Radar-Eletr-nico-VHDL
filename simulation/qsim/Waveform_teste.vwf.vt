// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/07/2024 12:17:05"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    radar
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module radar_vlg_sample_tst(
	areset,
	clk,
	enable,
	start,
	sampler_tx
);
input  areset;
input  clk;
input  enable;
input  start;
output sampler_tx;

reg sample;
time current_time;
always @(areset or clk or enable or start)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module radar_vlg_check_tst (
	error,
	ledblue,
	ledgreen,
	ledred,
	q_cnt,
	q_reg,
	reset_o,
	state,
	store_o,
	windows_o,
	sampler_rx
);
input  error;
input  ledblue;
input  ledgreen;
input  ledred;
input [3:0] q_cnt;
input [3:0] q_reg;
input  reset_o;
input [2:0] state;
input  store_o;
input  windows_o;
input sampler_rx;

reg  error_expected;
reg  ledblue_expected;
reg  ledgreen_expected;
reg  ledred_expected;
reg [3:0] q_cnt_expected;
reg [3:0] q_reg_expected;
reg  reset_o_expected;
reg [2:0] state_expected;
reg  store_o_expected;
reg  windows_o_expected;

reg  error_prev;
reg  ledblue_prev;
reg  ledgreen_prev;
reg  ledred_prev;
reg [3:0] q_cnt_prev;
reg [3:0] q_reg_prev;
reg  reset_o_prev;
reg [2:0] state_prev;
reg  store_o_prev;
reg  windows_o_prev;

reg  error_expected_prev;
reg  ledblue_expected_prev;
reg  ledgreen_expected_prev;
reg  ledred_expected_prev;
reg [3:0] q_cnt_expected_prev;
reg [3:0] q_reg_expected_prev;
reg  reset_o_expected_prev;
reg [2:0] state_expected_prev;
reg  store_o_expected_prev;
reg  windows_o_expected_prev;

reg  last_error_exp;
reg  last_ledblue_exp;
reg  last_ledgreen_exp;
reg  last_ledred_exp;
reg [3:0] last_q_cnt_exp;
reg [3:0] last_q_reg_exp;
reg  last_reset_o_exp;
reg [2:0] last_state_exp;
reg  last_store_o_exp;
reg  last_windows_o_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	error_prev = error;
	ledblue_prev = ledblue;
	ledgreen_prev = ledgreen;
	ledred_prev = ledred;
	q_cnt_prev = q_cnt;
	q_reg_prev = q_reg;
	reset_o_prev = reset_o;
	state_prev = state;
	store_o_prev = store_o;
	windows_o_prev = windows_o;
end

// update expected /o prevs

always @(trigger)
begin
	error_expected_prev = error_expected;
	ledblue_expected_prev = ledblue_expected;
	ledgreen_expected_prev = ledgreen_expected;
	ledred_expected_prev = ledred_expected;
	q_cnt_expected_prev = q_cnt_expected;
	q_reg_expected_prev = q_reg_expected;
	reset_o_expected_prev = reset_o_expected;
	state_expected_prev = state_expected;
	store_o_expected_prev = store_o_expected;
	windows_o_expected_prev = windows_o_expected;
end



// expected windows_o
initial
begin
	windows_o_expected = 1'bX;
end 

// expected store_o
initial
begin
	store_o_expected = 1'bX;
end 

// expected reset_o
initial
begin
	reset_o_expected = 1'bX;
end 
// expected q_cnt[ 3 ]
initial
begin
	q_cnt_expected[3] = 1'bX;
end 
// expected q_cnt[ 2 ]
initial
begin
	q_cnt_expected[2] = 1'bX;
end 
// expected q_cnt[ 1 ]
initial
begin
	q_cnt_expected[1] = 1'bX;
end 
// expected q_cnt[ 0 ]
initial
begin
	q_cnt_expected[0] = 1'bX;
end 
// expected q_reg[ 3 ]
initial
begin
	q_reg_expected[3] = 1'bX;
end 
// expected q_reg[ 2 ]
initial
begin
	q_reg_expected[2] = 1'bX;
end 
// expected q_reg[ 1 ]
initial
begin
	q_reg_expected[1] = 1'bX;
end 
// expected q_reg[ 0 ]
initial
begin
	q_reg_expected[0] = 1'bX;
end 

// expected ledblue
initial
begin
	ledblue_expected = 1'bX;
end 

// expected ledgreen
initial
begin
	ledgreen_expected = 1'bX;
end 

// expected ledred
initial
begin
	ledred_expected = 1'bX;
end 
// expected state[ 2 ]
initial
begin
	state_expected[2] = 1'bX;
end 
// expected state[ 1 ]
initial
begin
	state_expected[1] = 1'bX;
end 
// expected state[ 0 ]
initial
begin
	state_expected[0] = 1'bX;
end 

// expected error
initial
begin
	error_expected = 1'bX;
end 
// generate trigger
always @(error_expected or error or ledblue_expected or ledblue or ledgreen_expected or ledgreen or ledred_expected or ledred or q_cnt_expected or q_cnt or q_reg_expected or q_reg or reset_o_expected or reset_o or state_expected or state or store_o_expected or store_o or windows_o_expected or windows_o)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected error = %b | expected ledblue = %b | expected ledgreen = %b | expected ledred = %b | expected q_cnt = %b | expected q_reg = %b | expected reset_o = %b | expected state = %b | expected store_o = %b | expected windows_o = %b | ",error_expected_prev,ledblue_expected_prev,ledgreen_expected_prev,ledred_expected_prev,q_cnt_expected_prev,q_reg_expected_prev,reset_o_expected_prev,state_expected_prev,store_o_expected_prev,windows_o_expected_prev);
	$display("| real error = %b | real ledblue = %b | real ledgreen = %b | real ledred = %b | real q_cnt = %b | real q_reg = %b | real reset_o = %b | real state = %b | real store_o = %b | real windows_o = %b | ",error_prev,ledblue_prev,ledgreen_prev,ledred_prev,q_cnt_prev,q_reg_prev,reset_o_prev,state_prev,store_o_prev,windows_o_prev);
`endif
	if (
		( error_expected_prev !== 1'bx ) && ( error_prev !== error_expected_prev )
		&& ((error_expected_prev !== last_error_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port error :: @time = %t",  $realtime);
		$display ("     Expected value = %b", error_expected_prev);
		$display ("     Real value = %b", error_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_error_exp = error_expected_prev;
	end
	if (
		( ledblue_expected_prev !== 1'bx ) && ( ledblue_prev !== ledblue_expected_prev )
		&& ((ledblue_expected_prev !== last_ledblue_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledblue :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledblue_expected_prev);
		$display ("     Real value = %b", ledblue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ledblue_exp = ledblue_expected_prev;
	end
	if (
		( ledgreen_expected_prev !== 1'bx ) && ( ledgreen_prev !== ledgreen_expected_prev )
		&& ((ledgreen_expected_prev !== last_ledgreen_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledgreen :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledgreen_expected_prev);
		$display ("     Real value = %b", ledgreen_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ledgreen_exp = ledgreen_expected_prev;
	end
	if (
		( ledred_expected_prev !== 1'bx ) && ( ledred_prev !== ledred_expected_prev )
		&& ((ledred_expected_prev !== last_ledred_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledred :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledred_expected_prev);
		$display ("     Real value = %b", ledred_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ledred_exp = ledred_expected_prev;
	end
	if (
		( q_cnt_expected_prev[0] !== 1'bx ) && ( q_cnt_prev[0] !== q_cnt_expected_prev[0] )
		&& ((q_cnt_expected_prev[0] !== last_q_cnt_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q_cnt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_cnt_expected_prev);
		$display ("     Real value = %b", q_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_q_cnt_exp[0] = q_cnt_expected_prev[0];
	end
	if (
		( q_cnt_expected_prev[1] !== 1'bx ) && ( q_cnt_prev[1] !== q_cnt_expected_prev[1] )
		&& ((q_cnt_expected_prev[1] !== last_q_cnt_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q_cnt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_cnt_expected_prev);
		$display ("     Real value = %b", q_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_q_cnt_exp[1] = q_cnt_expected_prev[1];
	end
	if (
		( q_cnt_expected_prev[2] !== 1'bx ) && ( q_cnt_prev[2] !== q_cnt_expected_prev[2] )
		&& ((q_cnt_expected_prev[2] !== last_q_cnt_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q_cnt[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_cnt_expected_prev);
		$display ("     Real value = %b", q_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_q_cnt_exp[2] = q_cnt_expected_prev[2];
	end
	if (
		( q_cnt_expected_prev[3] !== 1'bx ) && ( q_cnt_prev[3] !== q_cnt_expected_prev[3] )
		&& ((q_cnt_expected_prev[3] !== last_q_cnt_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q_cnt[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_cnt_expected_prev);
		$display ("     Real value = %b", q_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_q_cnt_exp[3] = q_cnt_expected_prev[3];
	end
	if (
		( q_reg_expected_prev[0] !== 1'bx ) && ( q_reg_prev[0] !== q_reg_expected_prev[0] )
		&& ((q_reg_expected_prev[0] !== last_q_reg_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q_reg[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_reg_expected_prev);
		$display ("     Real value = %b", q_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_q_reg_exp[0] = q_reg_expected_prev[0];
	end
	if (
		( q_reg_expected_prev[1] !== 1'bx ) && ( q_reg_prev[1] !== q_reg_expected_prev[1] )
		&& ((q_reg_expected_prev[1] !== last_q_reg_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q_reg[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_reg_expected_prev);
		$display ("     Real value = %b", q_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_q_reg_exp[1] = q_reg_expected_prev[1];
	end
	if (
		( q_reg_expected_prev[2] !== 1'bx ) && ( q_reg_prev[2] !== q_reg_expected_prev[2] )
		&& ((q_reg_expected_prev[2] !== last_q_reg_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q_reg[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_reg_expected_prev);
		$display ("     Real value = %b", q_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_q_reg_exp[2] = q_reg_expected_prev[2];
	end
	if (
		( q_reg_expected_prev[3] !== 1'bx ) && ( q_reg_prev[3] !== q_reg_expected_prev[3] )
		&& ((q_reg_expected_prev[3] !== last_q_reg_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q_reg[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_reg_expected_prev);
		$display ("     Real value = %b", q_reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_q_reg_exp[3] = q_reg_expected_prev[3];
	end
	if (
		( reset_o_expected_prev !== 1'bx ) && ( reset_o_prev !== reset_o_expected_prev )
		&& ((reset_o_expected_prev !== last_reset_o_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reset_o :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reset_o_expected_prev);
		$display ("     Real value = %b", reset_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_reset_o_exp = reset_o_expected_prev;
	end
	if (
		( state_expected_prev[0] !== 1'bx ) && ( state_prev[0] !== state_expected_prev[0] )
		&& ((state_expected_prev[0] !== last_state_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[0] = state_expected_prev[0];
	end
	if (
		( state_expected_prev[1] !== 1'bx ) && ( state_prev[1] !== state_expected_prev[1] )
		&& ((state_expected_prev[1] !== last_state_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[1] = state_expected_prev[1];
	end
	if (
		( state_expected_prev[2] !== 1'bx ) && ( state_prev[2] !== state_expected_prev[2] )
		&& ((state_expected_prev[2] !== last_state_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[2] = state_expected_prev[2];
	end
	if (
		( store_o_expected_prev !== 1'bx ) && ( store_o_prev !== store_o_expected_prev )
		&& ((store_o_expected_prev !== last_store_o_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port store_o :: @time = %t",  $realtime);
		$display ("     Expected value = %b", store_o_expected_prev);
		$display ("     Real value = %b", store_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_store_o_exp = store_o_expected_prev;
	end
	if (
		( windows_o_expected_prev !== 1'bx ) && ( windows_o_prev !== windows_o_expected_prev )
		&& ((windows_o_expected_prev !== last_windows_o_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port windows_o :: @time = %t",  $realtime);
		$display ("     Expected value = %b", windows_o_expected_prev);
		$display ("     Real value = %b", windows_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_windows_o_exp = windows_o_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module radar_vlg_vec_tst();
// constants                                           
// general purpose registers
reg areset;
reg clk;
reg enable;
reg start;
// wires                                               
wire error;
wire ledblue;
wire ledgreen;
wire ledred;
wire [3:0] q_cnt;
wire [3:0] q_reg;
wire reset_o;
wire [2:0] state;
wire store_o;
wire windows_o;

wire sampler;                             

// assign statements (if any)                          
radar i1 (
// port map - connection between master ports and signals/registers   
	.areset(areset),
	.clk(clk),
	.enable(enable),
	.error(error),
	.ledblue(ledblue),
	.ledgreen(ledgreen),
	.ledred(ledred),
	.q_cnt(q_cnt),
	.q_reg(q_reg),
	.reset_o(reset_o),
	.start(start),
	.state(state),
	.store_o(store_o),
	.windows_o(windows_o)
);

// enable
initial
begin
	enable = 1'b1;
end 

// areset
initial
begin
	areset = 1'b1;
	areset = #20000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// start
initial
begin
	start = 1'b0;
	start = #70000 1'b1;
	start = #80000 1'b0;
	start = #80000 1'b1;
	start = #120000 1'b0;
	start = #110000 1'b1;
	start = #170000 1'b0;
end 

radar_vlg_sample_tst tb_sample (
	.areset(areset),
	.clk(clk),
	.enable(enable),
	.start(start),
	.sampler_tx(sampler)
);

radar_vlg_check_tst tb_out(
	.error(error),
	.ledblue(ledblue),
	.ledgreen(ledgreen),
	.ledred(ledred),
	.q_cnt(q_cnt),
	.q_reg(q_reg),
	.reset_o(reset_o),
	.state(state),
	.store_o(store_o),
	.windows_o(windows_o),
	.sampler_rx(sampler)
);
endmodule

